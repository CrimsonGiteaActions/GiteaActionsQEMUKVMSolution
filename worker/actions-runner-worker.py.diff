diff --git a/ChristopherHX-gitea-actions-runner/actions-runner-worker.py b/actions-runner-worker.py
index ec55a9a..c0995ba 100644
--- a/ChristopherHX-gitea-actions-runner/actions-runner-worker.py
+++ b/actions-runner-worker.py
@@ -1,43 +1,29 @@
-# This script can be used to call Runner.Worker as github-act-runner worker on unix like systems
-# You just have to create simple .runner file in the root folder with the following Content
-# {"isHostedServer": false, "agentName": "my-runner", "workFolder": "_work"}
-# Then use `python3 path/to/this/script.py path/to/actions/runner/bin/Runner.Worker` as the worker args
+# Reference: https://github.com/ChristopherHX/gitea-actions-runner
+# Modified version of actions-runner-worker.py (https://github.com/ChristopherHX/gitea-actions-runner/blob/main/actions-runner-worker.py)
 
 import sys
 import subprocess
 import os
 import threading
 import codecs
-import json
 
-worker = sys.argv[1]
-
-# Fallback if not existing
-runner_file = os.path.abspath(os.path.join(worker, '../../.runner'))
-if not os.path.exists(runner_file):
-    data = {
-        'isHostedServer': False,
-        'agentName': 'my-runner',
-        'workFolder': '_work'
-    }
-    with open(runner_file, 'w') as file:
-        json.dump(data, file)
-
-wdr, wdw = os.pipe()
+_, wdw = os.pipe()
 rdr, rdw = os.pipe()
 
-def readfull(fd: int, l: int):
+
+def pipe_read_full(fd: int, content_len: int):
     b = bytes()
-    while len(b) < l:
-        r = os.read(fd, l - len(b))
+    while len(b) < content_len:
+        r = os.read(fd, content_len - len(b))
         if len(r) <= 0:
             raise RuntimeError("unexpected read len: {}".format(len(r)))
         b += r
-    if len(b) != l:
-        raise RuntimeError("read {} bytes expected {} bytes".format(len(b), l))
+    if len(b) != content_len:
+        raise RuntimeError("read {} bytes expected {} bytes".format(len(b), content_len))
     return b
 
-def writefull(fd: int, buf: bytes):
+
+def pipe_write_full(fd: int, buf: bytes):
     written: int = 0
     while written < len(buf):
         w = os.write(fd, buf[written:])
@@ -48,34 +34,41 @@ def writefull(fd: int, buf: bytes):
         raise RuntimeError("written {} bytes expected {}".format(written, len(buf)))
     return written
 
-def redirectio():
-    while(True):
+
+def redirect_io():
+    while True:
         stdin = sys.stdin.fileno()
-        messageType = int.from_bytes(readfull(stdin, 4), "big", signed=False)
-        writefull(rdw, messageType.to_bytes(4, sys.byteorder, signed=False))
-        messageLength = int.from_bytes(readfull(stdin, 4), "big", signed=False)
-        rawmessage = readfull(stdin, messageLength)
-        message = codecs.decode(rawmessage, "utf-8")
+        message_type = int.from_bytes(pipe_read_full(stdin, 4), "big", signed=False)
+        pipe_write_full(rdw, message_type.to_bytes(4, sys.byteorder, signed=False))
+        message_len = int.from_bytes(pipe_read_full(stdin, 4), "big", signed=False)
+        raw_message = pipe_read_full(stdin, message_len)
+        message = codecs.decode(raw_message, "utf-8")
         if os.getenv("ACTIONS_RUNNER_WORKER_DEBUG", "0") != "0":
             print("Message Received")
-            print("Type:", messageType)
+            print("Type:", message_type)
             print("================")
             print(message)
             print("================")
         encoded = message.encode("utf_16")[2:]
-        writefull(rdw, len(encoded).to_bytes(4, sys.byteorder, signed=False))
-        writefull(rdw, encoded)
+        pipe_write_full(rdw, len(encoded).to_bytes(4, sys.byteorder, signed=False))
+        pipe_write_full(rdw, encoded)
+
+
+threading.Thread(target=redirect_io, daemon=True).start()
 
-threading.Thread(target=redirectio, daemon=True).start()
+_user = sys.argv[1]
+_group = sys.argv[2]
+_worker = sys.argv[3]
 
 interpreter = []
-if worker.endswith(".dll"):
-    interpreter = [ "dotnet" ]
+if _worker.endswith(".dll"):
+    interpreter = ["dotnet"]
 
-code = subprocess.call(interpreter + [worker, "spawnclient", format(rdr), format(wdw)], pass_fds=(rdr, wdw))
+code = subprocess.call(interpreter + [_worker, "spawnclient", format(rdr), format(wdw)],
+                       pass_fds=(rdr, wdw), user=_user, group=_group)
 print(code)
 # https://github.com/actions/runner/blob/af6ed41bcb47019cce2a7035bad76c97ac97b92a/src/Runner.Common/Util/TaskResultUtil.cs#L13-L14
-if code >= 100 and code <= 105:
-    sys.exit(0)
+if 100 <= code <= 105:
+    exit(0)
 else:
-    sys.exit(1)
+    exit(1)
